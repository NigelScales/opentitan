// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: "adc_ctrl"
  // TODO: remove the common testplans if not applicable
  import_testplans: ["hw/dv/tools/dvsim/testplans/csr_testplan.hjson",
                     "hw/dv/tools/dvsim/testplans/alert_test_testplan.hjson",
                     "hw/dv/tools/dvsim/testplans/intr_test_testplan.hjson",
                     "hw/dv/tools/dvsim/testplans/tl_device_access_types_testplan.hjson"]
  testpoints: [
    {
      name: smoke
      desc: '''
            Verify datapath between AST ADC interface and ADC sample registers.
            * Reset and configure DUT no filters or events.
            * Generate ADC data.
            * Sample into capture registers using oneshot mode and compare against expected.
            * Check oneshot bit of interrupt status register works as expected.
            '''
      milestone: V1
      tests: ["adc_ctrl_smoke"]
    }
    {
      name: filters_polled
      desc: '''
          Verify filter functionality by polling filter  status register.

          For a number of iterations:
          * Reset and configure DUT with filters enabled but no interrupts or wake events.
          * Generate ADC data stream and predict when filters should be triggered.
          * Confirm this by reading the filter status register.
          '''
      milestone: V2
      tests: []
    }
    {
      name: filters_interrupt
      desc: '''
          Verify filter interrupt functionality.

          For a number of iterations:
          * Reset and configure DUT with filters and interrupts enabled.
          * Generate ADC data stream and predict when filters should be triggered.
          * Confirm this by reading the filter status register and interrupt status register.
          * Confirm correct interrupt sample value has been captured in ADC sample registers(s)
          * Check interrupt signal operates as expected.
          '''
      milestone: V2
      tests: []
    }
    {
      name: filters_wakeup
      desc: '''
          Verify filter wakeup functionality
          * Reset and configure DUT with filters and wakeup enabled.
          * Generate data stream and predict when filters should be triggered.
          * Confirm this by reading the filter status register.
          * Also check wakeup signal operates as expected.
          '''
      milestone: V2
      tests: []
    }
    {
      name: poweron_counter
      desc: '''
          Verify ADC power on counter

          For a number of iterations:
          * Reset and configure DUT with a random ADC power on count.
          * Enable ADC and check timing of power down & channel select signals to ADC.
          '''
      milestone: V2
      tests: []
    }
    {
      name: lowpower_counter
      desc: '''
        Verify ADC low power counter

        For a number of iterations:
        * Reset and configure DUT with a random low power sample count.
        * Enable ADC in low power mode.
        * Generate ADC data and check return to fast sampling happens as expected.
        '''
      milestone: V2
      tests: []
    }
    {
      name: fsm_reset
      desc: '''
        Verify ADC controller FSM software reset

        For a number of iterations:
        * Reset and configure DUT with a random low power sample count.
        * Enable ADC randomly in low or high power mode. Generate ADC data.
        * Trigger a software reset by writing to adc_fsm_rst register.
        * Ensure ADC controller FSM and counters are reset.
        '''
      milestone: V2
      tests: []
    }
  ]

  covergroups: [
    {
      name: adc_ctrl_power_mode_cg
      desc: '''
        Cover power mode configuration
      '''
    }
    {
      name: adc_ctrl_filter_cg
      desc: '''
        Cover filter configuration (one instance per filter)
      '''
    }
    {
      name: adc_ctrl_fsm_reset_cg
      desc: '''
        Cover FSM state and counter values when fsm_reset is triggered
      '''
    }
    {
      name: adc_ctrl_hw_reset_cg
      desc: '''
        Cover FSM state and counter values when hardware reset is asserted
      '''
    }
  ]
}
